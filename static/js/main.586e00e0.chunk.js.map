{"version":3,"sources":["actions.js","api/api.js","constants.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/MainPage.js","containers/App.js","registerServiceWorker.js","reducers.js","index.js"],"names":["requestRobots","dispatch","link","type","fetch","then","response","json","data","payload","catch","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","Scroll","props","style","overflow","border","height","children","MainPage","filterRobots","_this","filter","robot","toLowerCase","includes","searchField","this","onRequestRobots","_this$props","onSearchChange","isPending","components_SearchBox","components_Scroll","components_CardList","Component","App","src_components_MainPage","connect","state","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.586e00e0.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nimport { apiCall } from \"./api/api\";\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","export const apiCall = (link) =>\n    fetch(link).then(response => response.json())","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\"\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\"\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\"\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\"","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n      <div className='footer'>\n        <p>Robots lovingly delivered by Robohash.org</p>\n      </div>\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        id='searchBox'\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './MainPage.css';\n\nclass MainPage extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = robots => {\n    return this.props.robots.filter(robot => {\n        return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n      })\n  }\n  render() {\n    const { onSearchChange, isPending } = this.props;\n    \n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={this.filterRobots()} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n\nexport default MainPage;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions.js';\nimport MainPage from '../components/MainPage';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props}/>\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload }; // return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false };\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport ThunkMiddleware from \"redux-thunk\";\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}